#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Check Bot
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ VPS/—Ö–æ—Å—Ç–∏–Ω–≥–µ 24/7
"""

import asyncio
import re
import logging
import os
import json
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.functions.channels import JoinChannelRequest
from flask import Flask, request, jsonify, render_template_string

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('API_ID', '21502665'))
API_HASH = os.getenv('API_HASH', 'a8c8544fd0f02965cb23b86ea6bd5599')
PHONE_NUMBER = os.getenv('PHONE_NUMBER', '+1 828 893 5130')
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1003034671650'))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('session', API_ID, API_HASH)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–µ–∫–∏
check_regex = re.compile(
    r't\.me/(CryptoBot|send|tonRocketBot|CryptoTestnetBot|wallet|xrocket|xJetSwapBot)\?start=([A-Za-z0-9_-]{10,})'
)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
activated_checks = set()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot_stats = {
    'total_checks': 0,
    'activated_checks': 0,
    'start_time': datetime.now().isoformat(),
    'status': 'stopped'
}

async def activate_check(bot_username, check_code):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞: {check_code} —á–µ—Ä–µ–∑ {bot_username}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await client.send_message(bot_username, f'/start {check_code}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        activated_checks.add(check_code)
        bot_stats['activated_checks'] = len(activated_checks)
        bot_stats['total_checks'] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        message = f'‚úÖ –ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {check_code}\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(activated_checks)}'
        await client.send_message(CHANNEL_ID, message)
        
        logger.info(f"–ß–µ–∫ {check_code} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ {check_code}: {e}")

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not event.text:
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text[:100]}...")

    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for match in check_regex.finditer(event.raw_text):
        bot_username, check_code = match.groups()
        if check_code not in activated_checks:
            await activate_check(bot_username, check_code)

    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ –∫–Ω–æ–ø–∫–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
    if event.buttons:
        for row in event.buttons:
            for button in row:
                url = getattr(button, 'url', '')
                if url:
                    match = check_regex.search(url)
                    if match:
                        bot_username, check_code = match.groups()
                        if check_code not in activated_checks:
                            await activate_check(bot_username, check_code)

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot_stats['status'] = 'starting'
        
        # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        await client.start(PHONE_NUMBER)
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        bot_stats['status'] = 'running'
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        await client.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–æ–≤")
        
        # –ó–∞–ø—É—Å–∫ –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot_stats['status'] = 'error'
    finally:
        await client.disconnect()
        bot_stats['status'] = 'stopped'

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÔøΩÔøΩ Telegram Check Bot</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background: #1a1a1a; color: white; }
        .status { padding: 20px; border-radius: 10px; margin: 20px 0; }
        .running { background: #2d5a2d; border: 1px solid #4a7c4a; }
        .stopped { background: #5a2d2d; border: 1px solid #7c4a4a; }
        .error { background: #5a5a2d; border: 1px solid #7c7c4a; }
        button { padding: 15px 30px; font-size: 16px; margin: 10px; border: none; border-radius: 5px; cursor: pointer; }
        .start-btn { background: #28a745; color: white; }
        .stop-btn { background: #dc3545; color: white; }
        .stats { background: #2a2a2a; padding: 15px; border-radius: 5px; margin: 20px 0; }
        h1 { color: #00ff00; text-align: center; }
        .check-item { background: #333; padding: 10px; margin: 5px 0; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>ÔøΩÔøΩ Telegram Check Bot Control Panel</h1>
    
    <div id="status" class="status stopped">
        <h3>ÔøΩÔøΩ –°—Ç–∞—Ç—É—Å: <span id="bot-status">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span></h3>
        <p>‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: <span id="start-time">-</span></p>
    </div>
    
    <div class="stats">
        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
        <p>ÔøΩÔøΩ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <span id="total-checks">0</span></p>
        <p>‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: <span id="activated-checks">0</span></p>
        <p>üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤: <span id="unique-checks">0</span></p>
    </div>
    
    <div style="text-align: center;">
        <button class="start-btn" onclick="startBot()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
        <button class="stop-btn" onclick="stopBot()">üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</button>
        <button onclick="updateStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
    </div>
    
    <div class="stats">
        <h3>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏:</h3>
        <div id="recent-checks">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    </div>
    
    <script>
        function updateStatus() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('bot-status').textContent = 
                        data.status === 'running' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : 
                        data.status === 'error' ? '–û—à–∏–±–∫–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                    
                    document.getElementById('start-time').textContent = 
                        new Date(data.start_time).toLocaleString();
                    
                    document.getElementById('total-checks').textContent = data.total_checks;
                    document.getElementById('activated-checks').textContent = data.activated_checks;
                    document.getElementById('unique-checks').textContent = data.unique_checks;
                    
                    const statusDiv = document.getElementById('status');
                    statusDiv.className = 'status ' + 
                        (data.status === 'running' ? 'running' : 
                         data.status === 'error' ? 'error' : 'stopped');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏
                    const recentDiv = document.getElementById('recent-checks');
                    if (data.recent_checks && data.recent_checks.length > 0) {
                        recentDiv.innerHTML = data.recent_checks.slice(0, 10).map(check => 
                            `<div class="check-item">‚úÖ ${check}</div>`
                        ).join('');
                    } else {
                        recentDiv.innerHTML = '–ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤';
                    }
                });
        }
        
        function startBot() {
            fetch('/api/start', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    updateStatus();
                });
        }
        
        function stopBot() {
            fetch('/api/stop', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    updateStatus();
                });
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(updateStatus, 5000);
        updateStatus();
    </script>
</body>
</html>
"""

# API –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/status')
def api_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    return jsonify({
        'status': bot_stats['status'],
        'total_checks': bot_stats['total_checks'],
        'activated_checks': bot_stats['activated_checks'],
        'unique_checks': len(activated_checks),
        'start_time': bot_stats['start_time'],
        'recent_checks': list(activated_checks)[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —á–µ–∫–æ–≤
    })

@app.route('/api/start', methods=['POST'])
def api_start():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if bot_stats['status'] == 'running':
        return jsonify({'success': False, 'message': '–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!'})
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    thread = threading.Thread(target=lambda: asyncio.run(start_bot()))
    thread.daemon = True
    thread.start()
    
    return jsonify({'success': True, 'message': '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'})

@app.route('/api/stop', methods=['POST'])
def api_stop():
    """API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    if bot_stats['status'] != 'running':
        return jsonify({'success': False, 'message': '–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!'})
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    asyncio.create_task(client.disconnect())
    bot_stats['status'] = 'stopping'
    
    return jsonify({'success': True, 'message': '–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'})

@app.route('/api/stats')
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify({
        'total_checks': bot_stats['total_checks'],
        'activated_checks': bot_stats['activated_checks'],
        'unique_checks': len(activated_checks),
        'uptime': str(datetime.now() - datetime.fromisoformat(bot_stats['start_time'])),
        'status': bot_stats['status']
    })

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram Check Bot Server...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=5000, debug=False)
